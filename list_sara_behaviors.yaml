action_count:
  description: Count instances of entity class around sara (will only rotate, won't move).
  usecase: Permet de compter le nombre d'instance d'un type d'objet
  modifications_suggested: REWORK
  status_of_working: COMPILING
  dependencies (behaviors): {}
  dependencies (states): {}

action_executor:
  description: Execute une action a partir d'un ActionForm.
  usecase:
  modifications_suggested: KEEP?
  status_of_working: COMPILING
  dependencies (behaviors): {}
  dependencies (states): {}

action_find:
  description: Find an entity around sara (will only rotate, won't move), identified by entity class.
  usecase: COMPETITION
  modifications_suggested: REWORK, rendre général
  status_of_working: COMPILING
  dependencies (behaviors): {}
  dependencies (states): {}

action_findperson:
  description: Find an entity arround sara, identified by entity class.
  usecase: Dans la plupart des scénarios, surtout GPSR
  modifications_suggested: KEEP OR DELETE AFTER action_find rework
  status_of_working: COMPILING
  dependencies (behaviors): {}
  dependencies (states): {}

action_follow:
  description: Suis une entité par son ID
  usecase: COMPETITION
  modifications_suggested: KEEP
  status_of_working:
  dependencies (behaviors): {NONE}
  dependencies (states): {SaraFollow,GetEntityByID,WaitState,SaraSetHeadAngle,KeepLookingAt,SaraSay}

action_give:
  description: give the content of the gripper to a person.
  usecase: COMPETITION
  modifications_suggested:
  status_of_working: COMPILING
  dependencies (behaviors): {}
  dependencies (states): {GetRosParam,CheckConditionState,SetKey,list_entities_by_name,CalculationState,LogState,SaraFollow,SaraSayKey,MoveItMove,SaraSay,ReadTorque,SetGripperState,KeepLookingAt,SetRosParam}

action_give_back_bag:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_guide2:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_guiding_person:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_lookaroundtofind:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_look_at:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_lookatbase:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_look_at_face:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_lookatfacebase:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_move:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_pass_door:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_pick:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_place:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_point_at:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_receive_bag:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

action_turn:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_answer:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_ask:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_attach:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_bring:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_confirm:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_count:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_find:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_find_person:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_follow:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_give:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_guide:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_lookat:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_move:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_pick:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_place:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_say:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_stop:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_turn:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

actionwrapper_waitfordoor:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

age_statistics:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

a_go_home:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

a_test_sandbox:
  description: Un bac pour tester des trucs random
  usecase: random
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

a_test_wonderland:
  description:
  usecase: pour tester les behaviors de wonderland
  modifications_suggested: DELETE
  status_of_working: ?
  dependencies (behaviors): {}
  dependencies (states): {}

check_reachability:
  description: Vérifit si une pose est à portée du bras
  usecase: pour pouvoir prendre des objets
  modifications_suggested: KEEP
  status_of_working: WORKING
  dependencies (behaviors): {}
  dependencies (states): {}

general_test:
  description: des tests
  usecase: pas utilisé
  modifications_suggested: DELETE
  status_of_working: ?
  dependencies (behaviors): {}
  dependencies (states): {}


get_operator:
  description: S'assure que l'opérateur est présent. Le cherche sinon.
  usecase: Pas encore utilisé
  modifications_suggested: KEEP
  status_of_working: ?
  dependencies (behaviors): {}
  dependencies (states): {}

get_speech:
  description: obtient la voix entendu
  usecase: pas utilisé
  modifications_suggested: DELETE
  status_of_working: ?
  dependencies (behaviors): {}
  dependencies (states): {}

get_waypoint_pose:
  description:
  usecase: pas utilisé
  modifications_suggested: DELETE
  status_of_working: NOT_COMPILING
  dependencies (behaviors): {}
  dependencies (states): {}

go_to_exit:
  description: sort de l'arène
  usecase: Pas utilisé
  modifications_suggested: DELETE
  status_of_working: ?
  dependencies (behaviors): {}
  dependencies (states): {}

go_to_from_waypoint_id:
  description: vas vers un waypoint par son ID
  usecase: pas utilisé
  modifications_suggested: DELETE
  status_of_working: ?
  dependencies (behaviors): {}
  dependencies (states): {}

go_to_room:
  description: rejoins une pièce
  usecase: Pas utilisé
  modifications_suggested: REWORK
  status_of_working: ?
  dependencies (behaviors): {}
  dependencies (states): {}

help_me_carry:
  description:
  usecase: compé 2018
  modifications_suggested: RENAME to scenario_help_me_carry
  status_of_working: WORKING
  dependencies (behaviors): {}
  dependencies (states): {}

init_sequence:
  description: Initialise le robot, le bras, la tête etc.
  usecase: Pas encore utilisé :(
  modifications_suggested: REWORK
  status_of_working: NO
  dependencies (behaviors): {}
  dependencies (states): {}

lookatclosest:
  description: Regarde à l'entité correspondante la plus proche
  usecase: Intération humaine plus naturelle
  modifications_suggested: REMAKE_AS_STATE
  status_of_working: WORKING
  dependencies (behaviors): {}
  dependencies (states): {}

new_qualif:
  description:
  usecase:
  modifications_suggested: DELETE
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

presentation_robotique_zone_1:
  description:
  usecase:
  modifications_suggested: DELETE
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

restaurant2018:
  description:
  usecase:
  modifications_suggested: DELETE
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

sara_action_executor:
  description:
  usecase: Dupliqué
  modifications_suggested: DELETE
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

sara_command_manager:
  description: fais l'aquisition des actions
  usecase: vieux stuff
  modifications_suggested: DELETE
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

sara_main_behavior:
  description: Ancient gpsr
  usecase: robocup 2017
  modifications_suggested: UNKNOWN
  status_of_working: UNKNOWN
  dependencies (behaviors): {}
  dependencies (states): {}

sara_presentation:
  description: Sara montre la liste de ses capacitées de facon simple et conviviale.
  usecase: Pour une petite présentation rapide
  modifications_suggested: REWORK
  status_of_working: NOT_COMPILING
  dependencies (behaviors): {}
  dependencies (states): {}

say_hello:
  description:
  usecase:
  modifications_suggested: DELETE
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

scenario_gpsr:
  description:
  usecase:
  modifications_suggested: KEEP
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

scenario_help_me_carry:
  description: scenario de la compé
  usecase: 2017
  modifications_suggested: DELETE
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

scenario_mvp_storing_groceries:
  description:
  usecase: Dupliqué de storing_groceries
  modifications_suggested: DELETE
  status_of_working: pas testé
  dependencies (behaviors): {}
  dependencies (states): {}

scenario_restaurant2018:
  description:
  usecase:
  modifications_suggested:
  status_of_working:
  dependencies (behaviors): {}
  dependencies (states): {}

scenario_security_check:
  description: Test de sécurité
  usecase: Au début de la compé. Pour pour se qualifier
  modifications_suggested: KEEP
  status_of_working: oui
  dependencies (behaviors): {}
  dependencies (states): {}

scenario_spr:
  description: Speech and people recognition
  usecase: la compé de 2017 et 2018
  modifications_suggested: KEEP
  status_of_working: oui
  dependencies (behaviors): {}
  dependencies (states): {}

stop:
  description: Arrète le robot
  usecase: Sertpuàrien
  modifications_suggested:  DELETE
  status_of_working: non
  dependencies (behaviors): {}
  dependencies (states): {}

test_continue_entity:
  description:
  usecase:  Sertpuàrien
  modifications_suggested: DELETE
  status_of_working: UNKNOWN
  dependencies (behaviors): {}
  dependencies (states): {}

testgenderage:
  description:
  usecase:  Sertpuàrien
  modifications_suggested: DELETE
  status_of_working: UNKNOWN
  dependencies (behaviors): {}
  dependencies (states): {}

wonderlandaddupdateperson:
  description: met à jours la liste des personnes du Entity_tracker vers wonderland
  usecase: pour spr
  modifications_suggested: REDEFINE
  status_of_working: UNKNOWN
  dependencies (behaviors): {}
  dependencies (states): {}

wonderlanduniqueenity:
  description: Trouve une entitée unique dans wonderland
  usecase: UNKNOWN
  modifications_suggested: REMAKE_AS_STATE
  status_of_working: UNKNOWN
  dependencies (behaviors): {}
  dependencies (states): {}
